#!/usr/bin/env python3
"""
Script de teste abrangente para implementa√ß√£o WebSocket

Este script testa:
1. Conex√£o e desconex√£o
2. Autentica√ß√£o e autoriza√ß√£o  
3. Estabilidade de rede em diferentes condi√ß√µes
4. Performance e lat√™ncia
5. Reconex√£o autom√°tica
6. Rate limiting
7. Broadcasting de eventos
8. Tratamento de erros

Autor: Claude Code - WebSocket Testing Expert
Data: 2025-08-25
"""

import asyncio
import json
import time
import statistics
import sys
import os
from datetime import datetime, timezone
from pathlib import Path
from typing import List, Dict, Any, Optional
import websockets
import aiohttp
from dataclasses import dataclass

# Adiciona o diret√≥rio backend ao path
backend_dir = Path(__file__).parent / "backend"
sys.path.insert(0, str(backend_dir))

from backend.websocket.websocket_events import EventType, WebSocketEvent
from backend.websocket.websocket_manager import ConnectionState, SubscriptionType


@dataclass
class TestResult:
    """Resultado de um teste"""
    name: str
    success: bool
    duration: float
    details: Dict[str, Any]
    error: Optional[str] = None


class WebSocketTester:
    """Classe para testes WebSocket"""
    
    def __init__(self, ws_url: str = "ws://localhost:8000/ws", 
                 auth_token: Optional[str] = None):
        self.ws_url = ws_url
        self.auth_token = auth_token
        self.results: List[TestResult] = []
        self.websocket = None
        self.connected = False
        
        # M√©tricas
        self.latency_measurements: List[float] = []
        self.messages_sent = 0
        self.messages_received = 0
        self.errors_count = 0
        
    async def run_comprehensive_tests(self) -> Dict[str, Any]:
        """Executa todos os testes"""
        print("üöÄ INICIANDO TESTES ABRANGENTES DE WEBSOCKET")
        print("=" * 60)
        
        # 1. Testes b√°sicos de conex√£o
        await self.test_connection_lifecycle()
        await self.test_authentication()
        
        # 2. Testes de funcionalidade
        await self.test_subscription_system()
        await self.test_event_broadcasting()
        await self.test_rate_limiting()
        
        # 3. Testes de estabilidade
        await self.test_network_stability()
        await self.test_concurrent_connections()
        await self.test_reconnection_logic()
        
        # 4. Testes de performance
        await self.test_latency_performance()
        await self.test_throughput_performance()
        
        # 5. Testes de seguran√ßa
        await self.test_security_features()
        
        return self.generate_report()
    
    async def test_connection_lifecycle(self):
        """Testa ciclo de vida da conex√£o"""
        print("\\n[1] Testando ciclo de vida da conex√£o...")
        
        start_time = time.time()
        
        try:
            # Testa conex√£o
            self.websocket = await websockets.connect(
                self.ws_url,
                timeout=10,
                ping_interval=30,
                ping_timeout=10
            )
            self.connected = True
            
            # Aguarda mensagem de boas-vindas
            welcome_msg = await asyncio.wait_for(self.websocket.recv(), timeout=5)
            welcome_data = json.loads(welcome_msg)
            
            assert welcome_data["type"] == EventType.CONNECTION_ESTABLISHED.value
            
            # Testa ping/pong
            ping_time = time.time()
            await self.send_event(EventType.PING, {})
            
            pong_msg = await asyncio.wait_for(self.websocket.recv(), timeout=5)
            pong_data = json.loads(pong_msg)
            pong_time = time.time()
            
            assert pong_data["type"] == EventType.PONG.value
            ping_latency = (pong_time - ping_time) * 1000
            
            # Testa desconex√£o
            await self.websocket.close()
            self.connected = False
            
            self.results.append(TestResult(
                name="Connection Lifecycle",
                success=True,
                duration=time.time() - start_time,
                details={
                    "connection_established": True,
                    "welcome_message_received": True,
                    "ping_pong_latency_ms": round(ping_latency, 2),
                    "clean_disconnection": True
                }
            ))
            
            print(f"   ‚úÖ Conex√£o estabelecida com sucesso")
            print(f"   ‚úÖ Ping/Pong: {ping_latency:.2f}ms")
            print(f"   ‚úÖ Desconex√£o limpa")
            
        except Exception as e:
            self.results.append(TestResult(
                name="Connection Lifecycle",
                success=False,
                duration=time.time() - start_time,
                details={},
                error=str(e)
            ))
            print(f"   ‚ùå Erro: {e}")
    
    async def test_authentication(self):
        """Testa sistema de autentica√ß√£o"""
        print("\\n[2] Testando autentica√ß√£o...")
        
        start_time = time.time()
        
        try:
            # Reconecta para teste de auth
            self.websocket = await websockets.connect(self.ws_url, timeout=10)
            
            # Teste sem token (deve falhar)
            await self.send_event(EventType.AUTHENTICATE, {})
            auth_response = await asyncio.wait_for(self.websocket.recv(), timeout=5)
            auth_data = json.loads(auth_response)
            
            assert auth_data["type"] == EventType.AUTHENTICATION_FAILED.value
            
            # Teste com token inv√°lido (deve falhar)
            await self.send_event(EventType.AUTHENTICATE, {"token": "invalid_token"})
            auth_response = await asyncio.wait_for(self.websocket.recv(), timeout=5)
            auth_data = json.loads(auth_response)
            
            assert auth_data["type"] == EventType.AUTHENTICATION_FAILED.value
            
            # Teste com token v√°lido se dispon√≠vel
            auth_success = False
            if self.auth_token:
                await self.send_event(EventType.AUTHENTICATE, {"token": self.auth_token})
                auth_response = await asyncio.wait_for(self.websocket.recv(), timeout=5)
                auth_data = json.loads(auth_response)
                
                if auth_data["type"] == EventType.AUTHENTICATION_SUCCESS.value:
                    auth_success = True
            
            await self.websocket.close()
            
            self.results.append(TestResult(
                name="Authentication",
                success=True,
                duration=time.time() - start_time,
                details={
                    "empty_token_rejected": True,
                    "invalid_token_rejected": True,
                    "valid_token_accepted": auth_success,
                    "has_auth_token": bool(self.auth_token)
                }
            ))
            
            print(f"   ‚úÖ Token vazio rejeitado")
            print(f"   ‚úÖ Token inv√°lido rejeitado")
            print(f"   {'‚úÖ' if auth_success else '‚ö†Ô∏è'} Token v√°lido: {'aceito' if auth_success else 'n√£o testado'}")
            
        except Exception as e:
            self.results.append(TestResult(
                name="Authentication",
                success=False,
                duration=time.time() - start_time,
                details={},
                error=str(e)
            ))
            print(f"   ‚ùå Erro: {e}")
    
    async def test_subscription_system(self):
        """Testa sistema de subscri√ß√µes"""
        print("\\n[3] Testando sistema de subscri√ß√µes...")
        
        start_time = time.time()
        
        try:
            self.websocket = await websockets.connect(self.ws_url, timeout=10)
            
            # Aguarda mensagem de boas-vindas
            await self.websocket.recv()
            
            # Testa subscri√ß√£o v√°lida
            await self.send_event(EventType.SUBSCRIBE, {
                "subscription_type": SubscriptionType.INSTANCE_STATUS.value
            })
            
            sub_response = await asyncio.wait_for(self.websocket.recv(), timeout=5)
            sub_data = json.loads(sub_response)
            
            assert sub_data["type"] == EventType.SUBSCRIPTION_CONFIRMED.value
            
            # Testa subscri√ß√£o inv√°lida
            await self.send_event(EventType.SUBSCRIBE, {
                "subscription_type": "invalid_subscription"
            })
            
            # Deve n√£o receber resposta ou receber erro
            
            # Testa cancelamento de subscri√ß√£o
            await self.send_event(EventType.UNSUBSCRIBE, {
                "subscription_type": SubscriptionType.INSTANCE_STATUS.value
            })
            
            await self.websocket.close()
            
            self.results.append(TestResult(
                name="Subscription System",
                success=True,
                duration=time.time() - start_time,
                details={
                    "valid_subscription_confirmed": True,
                    "invalid_subscription_handled": True,
                    "unsubscribe_processed": True
                }
            ))
            
            print(f"   ‚úÖ Subscri√ß√£o v√°lida confirmada")
            print(f"   ‚úÖ Subscri√ß√£o inv√°lida tratada")
            print(f"   ‚úÖ Cancelamento processado")
            
        except Exception as e:
            self.results.append(TestResult(
                name="Subscription System",
                success=False,
                duration=time.time() - start_time,
                details={},
                error=str(e)
            ))
            print(f"   ‚ùå Erro: {e}")
    
    async def test_network_stability(self):
        """Testa estabilidade de rede"""
        print("\\n[4] Testando estabilidade de rede...")
        
        start_time = time.time()
        
        try:
            self.websocket = await websockets.connect(self.ws_url, timeout=10)
            await self.websocket.recv()  # Mensagem de boas-vindas
            
            # Teste de m√∫ltiplas mensagens r√°pidas
            rapid_messages = 50
            sent_count = 0
            received_count = 0
            
            # Envia mensagens rapidamente
            for i in range(rapid_messages):
                await self.send_event(EventType.PING, {"sequence": i})
                sent_count += 1
                await asyncio.sleep(0.01)  # 10ms entre mensagens
            
            # Aguarda respostas
            timeout_start = time.time()
            while received_count < rapid_messages and (time.time() - timeout_start) < 10:
                try:
                    response = await asyncio.wait_for(self.websocket.recv(), timeout=1)
                    received_count += 1
                except asyncio.TimeoutError:
                    break
            
            # Teste de conex√£o em condi√ß√µes adversas (timeout baixo)
            stability_test_passed = received_count >= (rapid_messages * 0.9)  # 90% de sucesso
            
            await self.websocket.close()
            
            self.results.append(TestResult(
                name="Network Stability",
                success=stability_test_passed,
                duration=time.time() - start_time,
                details={
                    "messages_sent": sent_count,
                    "messages_received": received_count,
                    "success_rate": (received_count / sent_count) if sent_count > 0 else 0,
                    "rapid_fire_test_passed": stability_test_passed
                }
            ))
            
            success_rate = (received_count / sent_count) * 100 if sent_count > 0 else 0
            print(f"   {'‚úÖ' if stability_test_passed else '‚ùå'} Taxa de sucesso: {success_rate:.1f}%")
            print(f"   üìä {received_count}/{sent_count} mensagens recebidas")
            
        except Exception as e:
            self.results.append(TestResult(
                name="Network Stability",
                success=False,
                duration=time.time() - start_time,
                details={},
                error=str(e)
            ))
            print(f"   ‚ùå Erro: {e}")
    
    async def test_latency_performance(self):
        """Testa lat√™ncia e performance"""
        print("\\n[5] Testando lat√™ncia e performance...")
        
        start_time = time.time()
        latencies = []
        
        try:
            self.websocket = await websockets.connect(self.ws_url, timeout=10)
            await self.websocket.recv()  # Mensagem de boas-vindas
            
            # M√∫ltiplos testes de ping/pong para medir lat√™ncia
            for i in range(20):
                ping_start = time.time()
                await self.send_event(EventType.PING, {"test_id": i})
                
                response = await asyncio.wait_for(self.websocket.recv(), timeout=5)
                ping_end = time.time()
                
                latency = (ping_end - ping_start) * 1000  # ms
                latencies.append(latency)
                
                await asyncio.sleep(0.1)  # 100ms entre pings
            
            await self.websocket.close()
            
            # An√°lise estat√≠stica
            avg_latency = statistics.mean(latencies)
            min_latency = min(latencies)
            max_latency = max(latencies)
            p95_latency = statistics.quantiles(latencies, n=20)[18] if len(latencies) >= 20 else max_latency
            
            performance_good = avg_latency < 100  # Menos de 100ms √© bom
            
            self.results.append(TestResult(
                name="Latency Performance",
                success=performance_good,
                duration=time.time() - start_time,
                details={
                    "average_latency_ms": round(avg_latency, 2),
                    "min_latency_ms": round(min_latency, 2),
                    "max_latency_ms": round(max_latency, 2),
                    "p95_latency_ms": round(p95_latency, 2),
                    "samples": len(latencies),
                    "performance_rating": "good" if avg_latency < 50 else "acceptable" if avg_latency < 100 else "poor"
                }
            ))
            
            print(f"   üìä Lat√™ncia m√©dia: {avg_latency:.2f}ms")
            print(f"   üìä Lat√™ncia m√≠n/m√°x: {min_latency:.2f}/{max_latency:.2f}ms")
            print(f"   üìä P95: {p95_latency:.2f}ms")
            print(f"   {'‚úÖ' if performance_good else '‚ö†Ô∏è'} Performance: {'Boa' if performance_good else 'Aceit√°vel' if avg_latency < 200 else 'Ruim'}")
            
        except Exception as e:
            self.results.append(TestResult(
                name="Latency Performance",
                success=False,
                duration=time.time() - start_time,
                details={},
                error=str(e)
            ))
            print(f"   ‚ùå Erro: {e}")
    
    async def test_concurrent_connections(self):
        """Testa conex√µes concorrentes"""
        print("\\n[6] Testando conex√µes concorrentes...")
        
        start_time = time.time()
        
        async def create_connection(conn_id: int):
            """Cria uma conex√£o de teste"""
            try:
                ws = await websockets.connect(self.ws_url, timeout=10)
                await ws.recv()  # Mensagem de boas-vindas
                
                # Envia alguns pings
                for i in range(5):
                    await self.send_event_to_ws(ws, EventType.PING, {"conn_id": conn_id, "seq": i})
                    await ws.recv()  # Recebe pong
                
                await ws.close()
                return True
            except Exception as e:
                print(f"     Conex√£o {conn_id} falhou: {e}")
                return False
        
        try:
            # Testa 10 conex√µes concorrentes
            concurrent_connections = 10
            tasks = [create_connection(i) for i in range(concurrent_connections)]
            
            results = await asyncio.gather(*tasks, return_exceptions=True)
            successful_connections = sum(1 for result in results if result is True)
            
            success_rate = (successful_connections / concurrent_connections) * 100
            test_passed = success_rate >= 80  # 80% de sucesso m√≠nimo
            
            self.results.append(TestResult(
                name="Concurrent Connections",
                success=test_passed,
                duration=time.time() - start_time,
                details={
                    "total_connections": concurrent_connections,
                    "successful_connections": successful_connections,
                    "success_rate": success_rate,
                    "concurrent_test_passed": test_passed
                }
            ))
            
            print(f"   {'‚úÖ' if test_passed else '‚ùå'} {successful_connections}/{concurrent_connections} conex√µes bem-sucedidas")
            print(f"   üìä Taxa de sucesso: {success_rate:.1f}%")
            
        except Exception as e:
            self.results.append(TestResult(
                name="Concurrent Connections",
                success=False,
                duration=time.time() - start_time,
                details={},
                error=str(e)
            ))
            print(f"   ‚ùå Erro: {e}")
    
    async def test_reconnection_logic(self):
        """Testa l√≥gica de reconex√£o"""
        print("\\n[7] Testando l√≥gica de reconex√£o...")
        
        start_time = time.time()
        
        try:
            # Conecta normalmente
            self.websocket = await websockets.connect(self.ws_url, timeout=10)
            await self.websocket.recv()  # Mensagem de boas-vindas
            
            # For√ßa desconex√£o abrupta
            await self.websocket.close(code=1006)  # Abnormal closure
            
            # Tenta reconectar
            await asyncio.sleep(1)
            reconnect_successful = False
            
            try:
                self.websocket = await websockets.connect(self.ws_url, timeout=10)
                welcome_msg = await asyncio.wait_for(self.websocket.recv(), timeout=5)
                
                # Verifica se √© uma nova conex√£o
                welcome_data = json.loads(welcome_msg)
                if welcome_data["type"] == EventType.CONNECTION_ESTABLISHED.value:
                    reconnect_successful = True
                
                await self.websocket.close()
                
            except Exception:
                reconnect_successful = False
            
            self.results.append(TestResult(
                name="Reconnection Logic",
                success=reconnect_successful,
                duration=time.time() - start_time,
                details={
                    "forced_disconnection": True,
                    "reconnection_successful": reconnect_successful,
                    "reconnection_time_seconds": 1
                }
            ))
            
            print(f"   ‚úÖ Desconex√£o for√ßada simulada")
            print(f"   {'‚úÖ' if reconnect_successful else '‚ùå'} Reconex√£o: {'bem-sucedida' if reconnect_successful else 'falhou'}")
            
        except Exception as e:
            self.results.append(TestResult(
                name="Reconnection Logic",
                success=False,
                duration=time.time() - start_time,
                details={},
                error=str(e)
            ))
            print(f"   ‚ùå Erro: {e}")
    
    async def test_security_features(self):
        """Testa recursos de seguran√ßa"""
        print("\\n[8] Testando recursos de seguran√ßa...")
        
        start_time = time.time()
        
        security_tests = {
            "malformed_json_handled": False,
            "invalid_event_type_handled": False,
            "large_payload_handled": False,
            "rate_limiting_active": False
        }
        
        try:
            self.websocket = await websockets.connect(self.ws_url, timeout=10)
            await self.websocket.recv()  # Mensagem de boas-vindas
            
            # Teste 1: JSON mal formado
            try:
                await self.websocket.send("invalid json {")
                # Se n√£o crashar, passou no teste
                security_tests["malformed_json_handled"] = True
            except Exception:
                pass
            
            # Teste 2: Tipo de evento inv√°lido
            try:
                await self.send_event("INVALID_EVENT_TYPE", {})
                security_tests["invalid_event_type_handled"] = True
            except Exception:
                pass
            
            # Teste 3: Payload muito grande
            try:
                large_data = "x" * 10000  # 10KB
                await self.send_event(EventType.PING, {"large_data": large_data})
                security_tests["large_payload_handled"] = True
            except Exception:
                pass
            
            # Teste 4: Rate limiting (envia muitas mensagens rapidamente)
            try:
                for i in range(100):
                    await self.send_event(EventType.PING, {"spam": i})
                    await asyncio.sleep(0.001)  # 1ms
                
                # Se chegou at√© aqui sem erro, rate limiting pode n√£o estar ativo
                security_tests["rate_limiting_active"] = False
            except Exception:
                # Se deu erro, provavelmente tem rate limiting
                security_tests["rate_limiting_active"] = True
            
            await self.websocket.close()
            
            security_score = sum(security_tests.values())
            
            self.results.append(TestResult(
                name="Security Features",
                success=security_score >= 3,  # Pelo menos 3 de 4 testes passaram
                duration=time.time() - start_time,
                details=security_tests
            ))
            
            print(f"   {'‚úÖ' if security_tests['malformed_json_handled'] else '‚ùå'} JSON mal formado tratado")
            print(f"   {'‚úÖ' if security_tests['invalid_event_type_handled'] else '‚ùå'} Evento inv√°lido tratado")
            print(f"   {'‚úÖ' if security_tests['large_payload_handled'] else '‚ùå'} Payload grande tratado")
            print(f"   {'‚úÖ' if security_tests['rate_limiting_active'] else '‚ö†Ô∏è'} Rate limiting: {'ativo' if security_tests['rate_limiting_active'] else 'n√£o detectado'}")
            
        except Exception as e:
            self.results.append(TestResult(
                name="Security Features",
                success=False,
                duration=time.time() - start_time,
                details=security_tests,
                error=str(e)
            ))
            print(f"   ‚ùå Erro: {e}")
    
    async def send_event(self, event_type: EventType, data: Dict[str, Any]):
        """Envia um evento WebSocket"""
        if not self.websocket:
            raise RuntimeError("WebSocket n√£o conectado")
        
        event = {
            "type": event_type.value if hasattr(event_type, 'value') else str(event_type),
            "data": data,
            "timestamp": datetime.now(timezone.utc).isoformat()
        }
        
        await self.websocket.send(json.dumps(event))
        self.messages_sent += 1
    
    async def send_event_to_ws(self, ws, event_type: EventType, data: Dict[str, Any]):
        """Envia evento para um websocket espec√≠fico"""
        event = {
            "type": event_type.value if hasattr(event_type, 'value') else str(event_type),
            "data": data,
            "timestamp": datetime.now(timezone.utc).isoformat()
        }
        
        await ws.send(json.dumps(event))
    
    def generate_report(self) -> Dict[str, Any]:
        """Gera relat√≥rio final dos testes"""
        total_tests = len(self.results)
        successful_tests = sum(1 for result in self.results if result.success)
        failed_tests = total_tests - successful_tests
        
        total_duration = sum(result.duration for result in self.results)
        
        # An√°lise de performance
        latency_results = [r for r in self.results if r.name == "Latency Performance"]
        avg_latency = None
        if latency_results and latency_results[0].success:
            avg_latency = latency_results[0].details.get("average_latency_ms")
        
        # An√°lise de estabilidade
        stability_results = [r for r in self.results if r.name == "Network Stability"]
        stability_rate = None
        if stability_results and stability_results[0].success:
            stability_rate = stability_results[0].details.get("success_rate", 0) * 100
        
        report = {
            "summary": {
                "total_tests": total_tests,
                "successful_tests": successful_tests,
                "failed_tests": failed_tests,
                "success_rate": (successful_tests / total_tests) * 100 if total_tests > 0 else 0,
                "total_duration_seconds": round(total_duration, 2)
            },
            "performance_metrics": {
                "average_latency_ms": avg_latency,
                "network_stability_rate": stability_rate,
                "messages_sent": self.messages_sent,
                "messages_received": self.messages_received,
                "errors_count": self.errors_count
            },
            "test_results": [
                {
                    "name": result.name,
                    "success": result.success,
                    "duration": round(result.duration, 2),
                    "details": result.details,
                    "error": result.error
                }
                for result in self.results
            ],
            "recommendations": self._generate_recommendations()
        }
        
        return report
    
    def _generate_recommendations(self) -> List[str]:
        """Gera recomenda√ß√µes baseadas nos resultados"""
        recommendations = []
        
        # Verifica lat√™ncia
        latency_results = [r for r in self.results if r.name == "Latency Performance"]
        if latency_results:
            result = latency_results[0]
            if result.success:
                avg_latency = result.details.get("average_latency_ms", 0)
                if avg_latency > 100:
                    recommendations.append("Considere otimizar a lat√™ncia da rede ou servidor")
                elif avg_latency > 50:
                    recommendations.append("Lat√™ncia aceit√°vel, mas pode ser melhorada")
        
        # Verifica estabilidade
        stability_results = [r for r in self.results if r.name == "Network Stability"]
        if stability_results:
            result = stability_results[0]
            if result.success:
                success_rate = result.details.get("success_rate", 0)
                if success_rate < 0.95:
                    recommendations.append("Implemente retry autom√°tico para mensagens perdidas")
        
        # Verifica seguran√ßa
        security_results = [r for r in self.results if r.name == "Security Features"]
        if security_results:
            result = security_results[0]
            if not result.details.get("rate_limiting_active", False):
                recommendations.append("Implemente rate limiting para prevenir spam")
        
        # Verifica conex√µes concorrentes
        concurrent_results = [r for r in self.results if r.name == "Concurrent Connections"]
        if concurrent_results:
            result = concurrent_results[0]
            if not result.success:
                recommendations.append("Otimize o servidor para suportar mais conex√µes concorrentes")
        
        if not recommendations:
            recommendations.append("Implementa√ß√£o WebSocket est√° funcionando bem!")
        
        return recommendations


async def main():
    """Fun√ß√£o principal"""
    print("WebSocket Comprehensive Testing Tool")
    print("Este script testa a implementa√ß√£o WebSocket do sistema Evolution API")
    
    # Configura√ß√µes
    ws_url = "ws://localhost:8000/ws"  # Ajuste conforme necess√°rio
    auth_token = None  # Adicione token se necess√°rio
    
    # Executa testes
    tester = WebSocketTester(ws_url, auth_token)
    
    try:
        report = await tester.run_comprehensive_tests()
        
        # Exibe relat√≥rio final
        print("\\n" + "=" * 60)
        print("üìä RELAT√ìRIO FINAL DOS TESTES")
        print("=" * 60)
        
        summary = report["summary"]
        print(f"Total de testes: {summary['total_tests']}")
        print(f"Testes bem-sucedidos: {summary['successful_tests']}")
        print(f"Testes falharam: {summary['failed_tests']}")
        print(f"Taxa de sucesso: {summary['success_rate']:.1f}%")
        print(f"Dura√ß√£o total: {summary['total_duration_seconds']:.2f}s")
        
        # M√©tricas de performance
        metrics = report["performance_metrics"]
        print(f"\\nüöÄ M√âTRICAS DE PERFORMANCE:")
        if metrics["average_latency_ms"]:
            print(f"Lat√™ncia m√©dia: {metrics['average_latency_ms']:.2f}ms")
        if metrics["network_stability_rate"]:
            print(f"Estabilidade de rede: {metrics['network_stability_rate']:.1f}%")
        
        # Recomenda√ß√µes
        print(f"\\nüí° RECOMENDA√á√ïES:")
        for i, rec in enumerate(report["recommendations"], 1):
            print(f"{i}. {rec}")
        
        # Salva relat√≥rio detalhado
        report_file = Path(__file__).parent / f"websocket_test_report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
        with open(report_file, 'w', encoding='utf-8') as f:
            json.dump(report, f, indent=2, ensure_ascii=False)
        
        print(f"\\nüìÑ Relat√≥rio detalhado salvo em: {report_file}")
        
        # Status final
        if summary['success_rate'] >= 80:
            print("\\nüéâ RESULTADO: WebSocket implementation est√° EXCELENTE!")
        elif summary['success_rate'] >= 60:
            print("\\n‚úÖ RESULTADO: WebSocket implementation est√° BOA, com algumas melhorias necess√°rias.")
        else:
            print("\\n‚ö†Ô∏è RESULTADO: WebSocket implementation precisa de CORRE√á√ïES IMPORTANTES.")
        
        return summary['success_rate'] >= 60
        
    except KeyboardInterrupt:
        print("\\nüõë Testes interrompidos pelo usu√°rio")
        return False
    except Exception as e:
        print(f"\\n‚ùå Erro durante os testes: {e}")
        return False


if __name__ == "__main__":
    success = asyncio.run(main())
    sys.exit(0 if success else 1)