"""
Servi√ßo de integra√ß√£o com o framework Agno

Este servi√ßo fornece utilit√°rios e helpers para cria√ß√£o, configura√ß√£o
e execu√ß√£o de agentes utilizando o framework Agno.

Funcionalidades:
- Cria√ß√£o de configura√ß√µes de agentes baseadas na especializa√ß√£o
- Templates de instru√ß√µes por tipo de agente
- Integra√ß√£o com ferramentas/tools espec√≠ficas
- Helpers para execu√ß√£o e monitoramento

Autor: Agno SDK Agent Generator
Data: 2025-01-24
"""

import os
import asyncio
import json
from datetime import datetime
from typing import Dict, List, Any, Optional, Callable, Union
from pathlib import Path
from enum import Enum

from loguru import logger
try:
    from pydantic_settings import BaseSettings
except ImportError:
    from pydantic import BaseSettings

from schemas import AgentCreate, AgentSpecialization, AgentTool

class AgnoService:
    """
    Servi√ßo principal para integra√ß√£o com framework Agno
    """
    
    def __init__(self, settings):
        self.settings = settings
        self.model_provider = settings.agno_model_provider
        self.model_name = settings.agno_model_name
        
        # Cache de templates e configura√ß√µes
        self._templates_cache: Dict[str, Any] = {}
        self._tool_configs: Dict[str, Any] = {}
        
        logger.info(f"ü§ñ AgnoService inicializado - Provider: {self.model_provider}, Model: {self.model_name}")
    
    # TEMPLATES DE INSTRU√á√ïES POR ESPECIALIZA√á√ÉO
    
    def get_specialization_template(self, specialization: AgentSpecialization) -> Dict[str, Any]:
        """
        Obt√©m template de configura√ß√£o baseado na especializa√ß√£o
        
        Args:
            specialization: Tipo de especializa√ß√£o do agente
            
        Returns:
            Dict com configura√ß√µes padr√£o para a especializa√ß√£o
        """
        
        templates = {
            AgentSpecialization.ATENDIMENTO: {
                "base_instructions": """Voc√™ √© um assistente especializado em atendimento ao cliente. 

Suas responsabilidades principais:
- Responder d√∫vidas de forma clara e educada
- Resolver problemas dos clientes de forma eficiente  
- Coletar informa√ß√µes necess√°rias quando preciso
- Escalar para humanos quando necess√°rio
- Manter hist√≥rico das intera√ß√µes

Diretrizes de comportamento:
- Sempre seja educado, prestativo e emp√°tico
- Use linguagem clara e acess√≠vel
- Confirme o entendimento antes de prosseguir
- Ofere√ßa alternativas quando poss√≠vel
- Mantenha foco na resolu√ß√£o do problema""",
                
                "suggested_tools": ["whatsapp", "email"],
                "conversation_starters": [
                    "Ol√°! Como posso ajud√°-lo hoje?",
                    "Boa tarde! Em que posso ser √∫til?", 
                    "Seja bem-vindo! Como posso auxili√°-lo?"
                ],
                "escalation_keywords": [
                    "falar com humano", "atendente", "gerente", 
                    "reclama√ß√£o", "cancelar", "estou irritado"
                ],
                "max_conversation_length": 20,
                "response_style": "formal_friendly"
            },
            
            AgentSpecialization.VENDAS: {
                "base_instructions": """Voc√™ √© um assistente especializado em vendas e convers√£o.

Suas responsabilidades principais:
- Apresentar produtos/servi√ßos de forma atrativa
- Qualificar leads e identificar necessidades
- Conduzir o processo de vendas at√© o fechamento
- Lidar com obje√ß√µes de forma construtiva
- Acompanhar p√≥s-venda

Diretrizes de comportamento:
- Seja consultivo, n√£o apenas vendedor
- Escute ativamente as necessidades do cliente
- Use t√©cnicas de storytelling para engajar
- Crie senso de urg√™ncia quando apropriado
- Sempre adicione valor nas intera√ß√µes""",
                
                "suggested_tools": ["whatsapp", "crm", "payments"],
                "conversation_starters": [
                    "Ol√°! Vi seu interesse em nossos produtos. Como posso ajudar?",
                    "Boa tarde! Que tal conhecer nossa solu√ß√£o ideal para voc√™?",
                    "Seja bem-vindo! Vou te ajudar a encontrar exatamente o que precisa!"
                ],
                "sales_funnel_stages": [
                    "awareness", "interest", "consideration", "intent", "purchase", "retention"
                ],
                "objection_handlers": {
                    "pre√ßo": "Entendo sua preocupa√ß√£o com o investimento. Vamos analisar o retorno...",
                    "tempo": "Sei que tempo √© valioso. Nossa solu√ß√£o vai otimizar exatamente isso...",
                    "concorr√™ncia": "√ìtima pergunta! O diferencial da nossa solu√ß√£o √©..."
                },
                "max_conversation_length": 30,
                "response_style": "persuasive_friendly"
            },
            
            AgentSpecialization.AGENDAMENTO: {
                "base_instructions": """Voc√™ √© um assistente especializado em agendamentos e reservas.

Suas responsabilidades principais:
- Verificar disponibilidade de hor√°rios
- Agendar, reagendar e cancelar compromissos
- Enviar lembretes e confirma√ß√µes
- Gerenciar lista de espera
- Otimizar ocupa√ß√£o da agenda

Diretrizes de comportamento:
- Seja preciso com datas, hor√°rios e informa√ß√µes
- Confirme todos os detalhes antes de finalizar
- Ofere√ßa alternativas quando hor√°rio n√£o dispon√≠vel  
- Mantenha comunica√ß√£o proativa sobre mudan√ßas
- Facilite o processo para o cliente""",
                
                "suggested_tools": ["whatsapp", "calendar", "email"],
                "conversation_starters": [
                    "Ol√°! Vou te ajudar a agendar seu hor√°rio. Qual o melhor dia para voc√™?",
                    "Boa tarde! Para qual servi√ßo gostaria de agendar?",
                    "Seja bem-vindo! Vamos encontrar o hor√°rio perfeito para voc√™!"
                ],
                "time_slots": {
                    "morning": "08:00-12:00",
                    "afternoon": "13:00-17:00", 
                    "evening": "18:00-22:00"
                },
                "booking_fields": [
                    "service_type", "date", "time", "duration", "contact", "notes"
                ],
                "reminder_schedule": ["24h", "2h", "30min"],
                "max_conversation_length": 15,
                "response_style": "efficient_friendly"
            },
            
            AgentSpecialization.SUPORTE: {
                "base_instructions": """Voc√™ √© um assistente especializado em suporte t√©cnico.

Suas responsabilidades principais:
- Diagnosticar problemas t√©cnicos
- Fornecer solu√ß√µes passo-a-passo
- Criar tickets de suporte quando necess√°rio
- Acompanhar resolu√ß√£o de issues
- Documentar solu√ß√µes para knowledge base

Diretrizes de comportamento:
- Seja t√©cnico mas acess√≠vel na linguagem
- Fa√ßa perguntas espec√≠ficas para diagn√≥stico
- Forne√ßa instru√ß√µes claras e detalhadas
- Teste solu√ß√µes com o cliente
- Documente problemas recorrentes""",
                
                "suggested_tools": ["whatsapp", "email", "database"],
                "conversation_starters": [
                    "Ol√°! Vou te ajudar a resolver esse problema t√©cnico. Pode me descrever o que est√° acontecendo?",
                    "Boa tarde! Qual dificuldade t√©cnica posso ajudar voc√™ a resolver?",
                    "Seja bem-vindo ao suporte! Vamos resolver isso juntos!"
                ],
                "diagnostic_questions": [
                    "Quando o problema come√ßou a acontecer?",
                    "Que mensagem de erro aparece?",
                    "J√° tentou reiniciar o sistema?",
                    "Qual sistema operacional est√° usando?"
                ],
                "severity_levels": ["baixa", "m√©dia", "alta", "cr√≠tica"],
                "max_conversation_length": 25,
                "response_style": "technical_helpful"
            },
            
            AgentSpecialization.CUSTOM: {
                "base_instructions": """Voc√™ √© um assistente personalizado configurado para atender necessidades espec√≠ficas.

Suas responsabilidades ser√£o definidas pelas instru√ß√µes customizadas fornecidas.

Diretrizes gerais:
- Siga exatamente as instru√ß√µes personalizadas
- Mantenha consist√™ncia no comportamento
- Adapte-se ao contexto espec√≠fico
- Priorize a experi√™ncia do usu√°rio""",
                
                "suggested_tools": ["whatsapp"],
                "conversation_starters": [
                    "Ol√°! Como posso ajud√°-lo?"
                ],
                "max_conversation_length": 20,
                "response_style": "adaptive"
            }
        }
        
        return templates.get(specialization, templates[AgentSpecialization.CUSTOM])
    
    def build_agent_instructions(self, agent_data: AgentCreate) -> str:
        """
        Constr√≥i instru√ß√µes completas do agente combinando template e customiza√ß√µes
        
        Args:
            agent_data: Dados do agente criado pelo usu√°rio
            
        Returns:
            String com instru√ß√µes completas do agente
        """
        
        template = self.get_specialization_template(agent_data.specialization)
        base_instructions = template["base_instructions"]
        
        # Combina instru√ß√µes base com customiza√ß√µes do usu√°rio
        full_instructions = f"""{base_instructions}

## Instru√ß√µes Personalizadas

{agent_data.instructions}

## Ferramentas Dispon√≠veis

Voc√™ tem acesso √†s seguintes ferramentas:
{self._format_tools_list(agent_data.tools)}

## Configura√ß√µes do Agente

- Nome: {agent_data.agent_name}
- Especializa√ß√£o: {agent_data.specialization}
- Ferramentas: {', '.join(agent_data.tools)}

Lembre-se de sempre manter o foco em sua especializa√ß√£o e usar as ferramentas dispon√≠veis de forma eficiente."""

        return full_instructions
    
    def _format_tools_list(self, tools: List[str]) -> str:
        """Formata lista de ferramentas para as instru√ß√µes"""
        
        tool_descriptions = {
            "whatsapp": "- WhatsApp: Envio e recebimento de mensagens via WhatsApp",
            "email": "- E-mail: Envio de e-mails e notifica√ß√µes",
            "calendar": "- Calend√°rio: Agendamento e gerenciamento de compromissos",
            "webhooks": "- Webhooks: Integra√ß√£o com APIs externas via HTTP",
            "database": "- Banco de dados: Consulta e armazenamento de informa√ß√µes"
        }
        
        formatted = []
        for tool in tools:
            if tool in tool_descriptions:
                formatted.append(tool_descriptions[tool])
        
        return "\n".join(formatted) if formatted else "- Nenhuma ferramenta espec√≠fica configurada"
    
    # CONFIGURA√á√ÉO DE TOOLS/INTEGRA√á√ïES
    
    def get_tool_config(self, tool: AgentTool, agent_name: str) -> Dict[str, Any]:
        """
        Gera configura√ß√£o espec√≠fica para uma ferramenta
        
        Args:
            tool: Tipo da ferramenta
            agent_name: Nome do agente (usado em configura√ß√µes)
            
        Returns:
            Dict com configura√ß√£o da ferramenta
        """
        
        configs = {
            AgentTool.WHATSAPP: {
                "instance_name": f"{agent_name}-whatsapp",
                "webhook_url": f"/webhook/whatsapp/{agent_name}",
                "auto_reply": True,
                "message_delay": 1.0,
                "typing_indicator": True,
                "read_receipts": True,
                "max_message_length": 4096
            },
            
            AgentTool.EMAIL: {
                "smtp_server": "smtp.gmail.com",
                "smtp_port": 587,
                "use_tls": True,
                "from_name": f"Agente {agent_name}",
                "signature": f"\n\n---\nMensagem autom√°tica do agente {agent_name}\nGerado por Agno SDK Agent Generator",
                "max_attachments": 5,
                "attachment_size_limit": "10MB"
            },
            
            AgentTool.CALENDAR: {
                "calendar_provider": "google",
                "timezone": "America/Sao_Paulo",
                "working_hours": {
                    "start": "09:00",
                    "end": "18:00",
                    "days": ["monday", "tuesday", "wednesday", "thursday", "friday"]
                },
                "booking_buffer": 30,  # minutos entre agendamentos
                "advance_booking_days": 30,
                "reminder_times": [1440, 60]  # minutos antes do compromisso
            },
            
            AgentTool.WEBHOOKS: {
                "timeout": 30,
                "retry_attempts": 3,
                "retry_delay": 5,
                "headers": {
                    "User-Agent": f"Agno-Agent-{agent_name}/1.0",
                    "Content-Type": "application/json"
                },
                "allowed_methods": ["GET", "POST", "PUT", "PATCH"],
                "max_payload_size": "1MB"
            },
            
            AgentTool.DATABASE: {
                "database_type": "sqlite",
                "database_file": f"agents/{agent_name}/data.db",
                "connection_pool_size": 5,
                "query_timeout": 30,
                "auto_backup": True,
                "backup_frequency": "daily",
                "tables": {
                    "conversations": {
                        "id": "INTEGER PRIMARY KEY",
                        "contact": "TEXT",
                        "started_at": "TIMESTAMP",
                        "last_message": "TIMESTAMP",
                        "status": "TEXT"
                    },
                    "messages": {
                        "id": "INTEGER PRIMARY KEY",
                        "conversation_id": "INTEGER",
                        "content": "TEXT",
                        "sender": "TEXT",
                        "timestamp": "TIMESTAMP"
                    }
                }
            }
        }
        
        return configs.get(tool, {})
    
    # GERA√á√ÉO DE C√ìDIGO AGNO
    
    def generate_agent_class(self, agent_data: AgentCreate) -> str:
        """
        Gera c√≥digo da classe do agente Agno
        
        Args:
            agent_data: Dados do agente
            
        Returns:
            String com c√≥digo Python da classe do agente
        """
        
        class_name = self._to_class_name(agent_data.agent_name)
        instructions = self.build_agent_instructions(agent_data)
        
        # Imports baseados nas tools
        imports = self._generate_imports(agent_data.tools)
        
        # M√©todos baseados na especializa√ß√£o
        methods = self._generate_specialized_methods(agent_data.specialization)
        
        # Configura√ß√£o das tools
        tool_setup = self._generate_tool_setup(agent_data.tools, agent_data.agent_name)
        
        code = f'''"""
Agente {agent_data.agent_name}
Especializa√ß√£o: {agent_data.specialization}

Gerado automaticamente pelo Agno SDK Agent Generator
"""

{imports}

class {class_name}(BaseAgent):
    """
    Agente especializado em {agent_data.specialization}
    
    Ferramentas: {', '.join(agent_data.tools)}
    """
    
    def __init__(self, config: AgentConfig):
        super().__init__(config)
        
        # Configura√ß√µes espec√≠ficas
        self.specialization = "{agent_data.specialization}"
        self.tools = {agent_data.tools}
        
        # Templates da especializa√ß√£o
        self.template = self._load_specialization_template()
        
        # Configura√ß√£o das ferramentas
        self._setup_tools()
        
        logger.info(f"ü§ñ Agente {self.config.name} inicializado - {self.specialization}")
    
    def _load_specialization_template(self, agent_data: AgentCreate) -> Dict[str, Any]:
        """Carrega template da especializa√ß√£o"""
        specialization = getattr(AgentSpecialization, agent_data.specialization.upper())
        return self.get_specialization_template(specialization)
    
    def _setup_tools(self):
        """Configura ferramentas dispon√≠veis"""
        pass  # Implementa√ß√£o das ferramentas
    
    async def process_message(self, message: str, context: Dict[str, Any] = None) -> str:
        """
        Processa mensagem recebida
        
        Args:
            message: Mensagem recebida
            context: Contexto da conversa
            
        Returns:
            Resposta do agente
        """
        try:
            logger.debug(f"Processando mensagem: {{message[:100]}}...")
            
            # Enriquece contexto com dados da especializa√ß√£o
            enriched_context = self._enrich_context(context or {{}})
            
            # Processa baseado na especializa√ß√£o
            response = await self._process_by_specialization(message, enriched_context)
            
            # P√≥s-processamento
            final_response = await self._post_process_response(response, enriched_context)
            
            logger.info("‚úÖ Mensagem processada com sucesso")
            return final_response
            
        except Exception as e:
            logger.error(f"‚ùå Erro ao processar mensagem: {{e}}")
            return self._get_error_response(str(e))
    
    async def _process_by_specialization(self, message: str, context: Dict[str, Any]) -> str:
        """Processa mensagem baseado na especializa√ß√£o"""
        {methods}
    
    def _enrich_context(self, context: Dict[str, Any]) -> Dict[str, Any]:
        """Enriquece contexto com dados espec√≠ficos da especializa√ß√£o"""
        
        enriched = context.copy()
        enriched.update({{
            'agent_name': self.config.name,
            'specialization': self.specialization,
            'tools': self.tools,
            'template': self.template,
            'timestamp': datetime.now().isoformat()
        }})
        
        return enriched
    
    async def _post_process_response(self, response: str, context: Dict[str, Any]) -> str:
        """P√≥s-processa resposta antes de enviar"""
        
        # Aplica estilo de resposta da especializa√ß√£o
        style = self.template.get('response_style', 'neutral')
        
        if style == 'formal_friendly':
            response = self._apply_formal_friendly_style(response)
        elif style == 'persuasive_friendly':
            response = self._apply_persuasive_style(response)
        elif style == 'efficient_friendly':
            response = self._apply_efficient_style(response)
        elif style == 'technical_helpful':
            response = self._apply_technical_style(response)
        
        return response
    
    def _apply_formal_friendly_style(self, response: str) -> str:
        """Aplica estilo formal e amig√°vel"""
        # Implementar personaliza√ß√£o de estilo
        return response
    
    def _apply_persuasive_style(self, response: str) -> str:
        """Aplica estilo persuasivo para vendas"""
        # Implementar personaliza√ß√£o de estilo
        return response
    
    def _apply_efficient_style(self, response: str) -> str:
        """Aplica estilo eficiente para agendamentos"""
        # Implementar personaliza√ß√£o de estilo
        return response
    
    def _apply_technical_style(self, response: str) -> str:
        """Aplica estilo t√©cnico para suporte"""
        # Implementar personaliza√ß√£o de estilo
        return response
    
    def _get_error_response(self, error: str) -> str:
        """Gera resposta amig√°vel para erros"""
        
        error_responses = {{
            "timeout": "Desculpe, demorei um pouco para processar. Pode repetir sua mensagem?",
            "unknown": "Ops! Algo n√£o saiu como esperado. Pode tentar novamente?",
            "validation": "Parece que h√° algum problema com as informa√ß√µes. Pode verificar e tentar novamente?"
        }}
        
        # Identifica tipo do erro
        if "timeout" in error.lower():
            return error_responses["timeout"]
        elif "validation" in error.lower():
            return error_responses["validation"]
        else:
            return error_responses["unknown"]
'''

        return code
    
    def _to_class_name(self, agent_name: str) -> str:
        """Converte nome do agente para nome de classe Python"""
        
        # Remove caracteres especiais e converte para PascalCase
        words = agent_name.replace('-', '_').replace('_', ' ').split()
        class_name = ''.join(word.capitalize() for word in words)
        
        return f"{class_name}Agent"
    
    def _generate_imports(self, tools: List[str]) -> str:
        """Gera imports baseado nas ferramentas utilizadas"""
        
        base_imports = """
import asyncio
from datetime import datetime
from typing import Dict, List, Any, Optional
from loguru import logger

from agno import BaseAgent, AgentConfig
from schemas import AgentSpecialization"""

        tool_imports = []
        
        if "whatsapp" in tools:
            tool_imports.append("from services.evolution import EvolutionService")
        
        if "email" in tools:
            tool_imports.append("import smtplib")
            tool_imports.append("from email.mime.text import MIMEText")
            tool_imports.append("from email.mime.multipart import MIMEMultipart")
        
        if "calendar" in tools:
            tool_imports.append("from google.oauth2 import service_account")
            tool_imports.append("from googleapiclient.discovery import build")
        
        if "webhooks" in tools:
            tool_imports.append("import httpx")
        
        if "database" in tools:
            tool_imports.append("import sqlite3")
            tool_imports.append("from contextlib import asynccontextmanager")
        
        all_imports = [base_imports] + tool_imports
        return '\n'.join(all_imports)
    
    def _generate_specialized_methods(self, specialization: AgentSpecialization) -> str:
        """Gera m√©todos espec√≠ficos da especializa√ß√£o"""
        
        methods = {
            AgentSpecialization.ATENDIMENTO: '''
        if self._is_escalation_needed(message):
            return await self._handle_escalation(message, context)
        elif self._is_faq_question(message):
            return await self._handle_faq(message, context)
        else:
            return await self._handle_general_support(message, context)
    
    async def _handle_escalation(self, message: str, context: Dict[str, Any]) -> str:
        """Trata escala√ß√£o para atendimento humano"""
        # TODO: Implementar l√≥gica de escala√ß√£o
        return "Entendo que precisa falar com um atendente. Vou transferir voc√™ agora."
    
    async def _handle_faq(self, message: str, context: Dict[str, Any]) -> str:
        """Responde perguntas frequentes"""
        # TODO: Implementar base de conhecimento
        return "Baseado em nossa FAQ, posso ajud√°-lo com isso..."
    
    async def _handle_general_support(self, message: str, context: Dict[str, Any]) -> str:
        """Trata suporte geral"""
        # TODO: Implementar l√≥gica de suporte geral
        return "Vou ajud√°-lo com sua quest√£o. Pode me dar mais detalhes?"
    
    def _is_escalation_needed(self, message: str) -> bool:
        """Verifica se precisa escalar para humano"""
        keywords = self.template.get('escalation_keywords', [])
        return any(keyword.lower() in message.lower() for keyword in keywords)
    
    def _is_faq_question(self, message: str) -> bool:
        """Verifica se √© pergunta frequente"""
        # TODO: Implementar detec√ß√£o de FAQ
        return False''',
            
            AgentSpecialization.VENDAS: '''
        # Identifica est√°gio do funil de vendas
        stage = self._identify_sales_stage(message, context)
        
        if stage == "awareness":
            return await self._handle_awareness(message, context)
        elif stage == "interest":
            return await self._handle_interest(message, context)
        elif stage == "consideration":
            return await self._handle_consideration(message, context)
        elif stage == "intent":
            return await self._handle_intent(message, context)
        else:
            return await self._handle_general_sales(message, context)
    
    def _identify_sales_stage(self, message: str, context: Dict[str, Any]) -> str:
        """Identifica est√°gio do funil de vendas"""
        # TODO: Implementar l√≥gica de identifica√ß√£o de est√°gio
        return "interest"
    
    async def _handle_awareness(self, message: str, context: Dict[str, Any]) -> str:
        """Trata fase de conscientiza√ß√£o"""
        return "Que bom que voc√™ tem interesse! Deixe-me te mostrar como podemos ajudar..."
    
    async def _handle_interest(self, message: str, context: Dict[str, Any]) -> str:
        """Trata fase de interesse"""
        return "Perfeito! Para te ajudar melhor, me conta qual sua principal necessidade..."
    
    async def _handle_consideration(self, message: str, context: Dict[str, Any]) -> str:
        """Trata fase de considera√ß√£o"""
        return "Vejo que est√° avaliando op√ß√µes. Nossa solu√ß√£o se diferencia porque..."
    
    async def _handle_intent(self, message: str, context: Dict[str, Any]) -> str:
        """Trata inten√ß√£o de compra"""
        return "√ìtimo! Vou preparar uma proposta personalizada para voc√™..."
    
    async def _handle_general_sales(self, message: str, context: Dict[str, Any]) -> str:
        """Trata vendas em geral"""
        return "Como posso te ajudar a encontrar a solu√ß√£o ideal?"''',
            
            AgentSpecialization.AGENDAMENTO: '''
        if self._is_booking_request(message):
            return await self._handle_booking(message, context)
        elif self._is_cancellation_request(message):
            return await self._handle_cancellation(message, context)
        elif self._is_reschedule_request(message):
            return await self._handle_reschedule(message, context)
        else:
            return await self._handle_availability_check(message, context)
    
    def _is_booking_request(self, message: str) -> bool:
        """Verifica se √© solicita√ß√£o de agendamento"""
        keywords = ["agendar", "marcar", "reservar", "hor√°rio", "consulta"]
        return any(keyword in message.lower() for keyword in keywords)
    
    def _is_cancellation_request(self, message: str) -> bool:
        """Verifica se √© solicita√ß√£o de cancelamento"""
        keywords = ["cancelar", "desmarcar", "n√£o posso ir"]
        return any(keyword in message.lower() for keyword in keywords)
    
    def _is_reschedule_request(self, message: str) -> bool:
        """Verifica se √© solicita√ß√£o de reagendamento"""
        keywords = ["reagendar", "mudar hor√°rio", "trocar data"]
        return any(keyword in message.lower() for keyword in keywords)
    
    async def _handle_booking(self, message: str, context: Dict[str, Any]) -> str:
        """Trata agendamento"""
        return "Vou te ajudar a agendar! Qual servi√ßo voc√™ precisa e qual sua prefer√™ncia de hor√°rio?"
    
    async def _handle_cancellation(self, message: str, context: Dict[str, Any]) -> str:
        """Trata cancelamento"""
        return "Sem problemas! Para cancelar, preciso do seu nome e hor√°rio agendado."
    
    async def _handle_reschedule(self, message: str, context: Dict[str, Any]) -> str:
        """Trata reagendamento"""
        return "Claro! Vou te ajudar a reagendar. Qual seria a nova data de prefer√™ncia?"
    
    async def _handle_availability_check(self, message: str, context: Dict[str, Any]) -> str:
        """Verifica disponibilidade"""
        return "Deixe-me verificar nossos hor√°rios dispon√≠veis..."''',
            
            AgentSpecialization.SUPORTE: '''
        if self._is_urgent_issue(message):
            return await self._handle_urgent_support(message, context)
        elif self._is_common_issue(message):
            return await self._handle_common_issue(message, context)
        else:
            return await self._handle_technical_diagnosis(message, context)
    
    def _is_urgent_issue(self, message: str) -> bool:
        """Verifica se √© problema urgente"""
        keywords = ["urgente", "parado", "n√£o funciona", "erro cr√≠tico"]
        return any(keyword in message.lower() for keyword in keywords)
    
    def _is_common_issue(self, message: str) -> bool:
        """Verifica se √© problema comum"""
        # TODO: Implementar detec√ß√£o de problemas comuns
        return False
    
    async def _handle_urgent_support(self, message: str, context: Dict[str, Any]) -> str:
        """Trata suporte urgente"""
        return "Entendo que √© urgente! Vou priorizar seu atendimento. Pode me dar mais detalhes do problema?"
    
    async def _handle_common_issue(self, message: str, context: Dict[str, Any]) -> str:
        """Trata problemas comuns"""
        return "Esse √© um problema que j√° vi antes. Vamos tentar essa solu√ß√£o..."
    
    async def _handle_technical_diagnosis(self, message: str, context: Dict[str, Any]) -> str:
        """Faz diagn√≥stico t√©cnico"""
        questions = self.template.get('diagnostic_questions', [])
        if questions:
            return f"Para te ajudar melhor: {questions[0]}"
        return "Vou te ajudar a resolver isso. Pode me dar mais detalhes t√©cnicos?"''',
            
            AgentSpecialization.CUSTOM: '''
        # Processa mensagem com l√≥gica personalizada
        return await self._handle_custom_logic(message, context)
    
    async def _handle_custom_logic(self, message: str, context: Dict[str, Any]) -> str:
        """Implementa l√≥gica personalizada"""
        # TODO: Implementar l√≥gica espec√≠fica baseada nas instru√ß√µes customizadas
        return "Processando sua mensagem com l√≥gica personalizada..."'''
        }
        
        return methods.get(specialization, methods[AgentSpecialization.CUSTOM])
    
    def _generate_tool_setup(self, tools: List[str], agent_name: str) -> str:
        """Gera c√≥digo de configura√ß√£o das ferramentas"""
        
        setup_code = []
        
        for tool in tools:
            config = self.get_tool_config(AgentTool(tool), agent_name)
            
            if tool == "whatsapp":
                setup_code.append(f'''
        # Configura√ß√£o WhatsApp
        if "whatsapp" in self.tools:
            self.whatsapp_service = EvolutionService(self.config.settings)
            self.whatsapp_config = {config}
            logger.info("üì± WhatsApp service configurado")''')
            
            elif tool == "email":
                setup_code.append(f'''
        # Configura√ß√£o E-mail
        if "email" in self.tools:
            self.email_config = {config}
            logger.info("üìß Email service configurado")''')
            
            elif tool == "calendar":
                setup_code.append(f'''
        # Configura√ß√£o Calend√°rio
        if "calendar" in self.tools:
            self.calendar_config = {config}
            logger.info("üìÖ Calendar service configurado")''')
            
            elif tool == "webhooks":
                setup_code.append(f'''
        # Configura√ß√£o Webhooks
        if "webhooks" in self.tools:
            self.webhook_config = {config}
            self.http_client = httpx.AsyncClient()
            logger.info("üîó Webhook service configurado")''')
            
            elif tool == "database":
                setup_code.append(f'''
        # Configura√ß√£o Database
        if "database" in self.tools:
            self.db_config = {config}
            self._setup_database()
            logger.info("üóÑÔ∏è Database service configurado")''')
        
        return '\n'.join(setup_code) if setup_code else '        pass  # Nenhuma ferramenta para configurar'
    
    # UTILIT√ÅRIOS E HELPERS
    
    async def validate_agent_config(self, agent_data: AgentCreate) -> Dict[str, Any]:
        """
        Valida configura√ß√£o do agente
        
        Args:
            agent_data: Dados do agente
            
        Returns:
            Dict com resultado da valida√ß√£o
        """
        
        issues = []
        warnings = []
        
        # Valida nome
        if not agent_data.agent_name.replace('-', '').replace('_', '').isalnum():
            issues.append("Nome do agente deve conter apenas letras, n√∫meros, h√≠fen e underscore")
        
        # Valida instru√ß√µes
        if len(agent_data.instructions) < 50:
            warnings.append("Instru√ß√µes muito curtas podem resultar em comportamento inconsistente")
        
        if len(agent_data.instructions) > 8000:
            warnings.append("Instru√ß√µes muito longas podem impactar performance")
        
        # Valida combina√ß√£o de ferramentas
        if "calendar" in agent_data.tools and agent_data.specialization != AgentSpecialization.AGENDAMENTO:
            warnings.append("Ferramenta Calendar √© mais efetiva com especializa√ß√£o Agendamento")
        
        if "database" in agent_data.tools and len(agent_data.tools) == 1:
            warnings.append("Database sozinho pode limitar interatividade do agente")
        
        return {
            "valid": len(issues) == 0,
            "issues": issues,
            "warnings": warnings,
            "score": max(0, 100 - len(issues) * 25 - len(warnings) * 5)
        }
    
    def get_suggested_improvements(self, agent_data: AgentCreate) -> List[str]:
        """
        Sugere melhorias para configura√ß√£o do agente
        
        Args:
            agent_data: Dados do agente
            
        Returns:
            Lista de sugest√µes
        """
        
        suggestions = []
        template = self.get_specialization_template(agent_data.specialization)
        
        # Sugest√µes baseadas na especializa√ß√£o
        suggested_tools = template.get("suggested_tools", [])
        missing_tools = set(suggested_tools) - set(agent_data.tools)
        
        if missing_tools:
            suggestions.append(f"Considere adicionar as ferramentas: {', '.join(missing_tools)}")
        
        # Sugest√µes baseadas nas instru√ß√µes
        if "por favor" not in agent_data.instructions.lower():
            suggestions.append("Inclua palavras de cortesia nas instru√ß√µes para melhor experi√™ncia do usu√°rio")
        
        if agent_data.specialization == AgentSpecialization.VENDAS and "obje√ß√£o" not in agent_data.instructions.lower():
            suggestions.append("Para vendas, considere incluir estrat√©gias para lidar com obje√ß√µes")
        
        return suggestions
    
    def estimate_performance_metrics(self, agent_data: AgentCreate) -> Dict[str, Any]:
        """
        Estima m√©tricas de performance baseado na configura√ß√£o
        
        Args:
            agent_data: Dados do agente
            
        Returns:
            Dict com estimativas de performance
        """
        
        base_response_time = 1.5  # segundos
        
        # Ajusta baseado no n√∫mero de ferramentas
        tool_overhead = len(agent_data.tools) * 0.3
        
        # Ajusta baseado no tamanho das instru√ß√µes
        instruction_complexity = len(agent_data.instructions) / 1000 * 0.2
        
        estimated_response_time = base_response_time + tool_overhead + instruction_complexity
        
        # Calcula outras m√©tricas
        specialization_multiplier = {
            AgentSpecialization.ATENDIMENTO: 1.0,
            AgentSpecialization.VENDAS: 1.2,
            AgentSpecialization.AGENDAMENTO: 0.8,
            AgentSpecialization.SUPORTE: 1.3,
            AgentSpecialization.CUSTOM: 1.1
        }
        
        complexity_score = min(100, len(agent_data.tools) * 20 + len(agent_data.instructions) / 50)
        
        return {
            "estimated_response_time_seconds": round(estimated_response_time, 2),
            "complexity_score": round(complexity_score, 1),
            "specialization_efficiency": specialization_multiplier.get(agent_data.specialization, 1.0),
            "recommended_concurrent_users": max(1, int(20 / estimated_response_time)),
            "memory_usage_mb": round(50 + len(agent_data.tools) * 10 + len(agent_data.instructions) / 100, 1)
        }