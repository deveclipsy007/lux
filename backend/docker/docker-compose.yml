# Docker Compose para Evolution API
# Configuração completa com PostgreSQL, Redis e monitoramento
# Autor: AgnoMaster - Evolution API Expert
# Data: 2025-01-24

version: '3.8'

services:
  # Evolution API - Aplicação principal
  evolution-api:
    build:
      context: ..
      dockerfile: docker/Dockerfile
    container_name: evolution-api
    restart: unless-stopped
    ports:
      - "${API_PORT:-8000}:8000"
    environment:
      # Configurações da aplicação
      - ENVIRONMENT=${ENVIRONMENT:-production}
      - DEBUG=${DEBUG:-false}
      - PORT=8000
      - WORKERS=${WORKERS:-4}
      
      # Banco de dados
      - DATABASE_URL=postgresql://${POSTGRES_USER:-evolution}:${POSTGRES_PASSWORD:-evolution123}@postgres:5432/${POSTGRES_DB:-evolution_api}
      
      # Redis
      - REDIS_URL=redis://redis:6379/0
      
      # JWT e Segurança
      - JWT_SECRET_KEY=${JWT_SECRET_KEY:-your-super-secret-jwt-key-change-in-production}
      - JWT_ALGORITHM=${JWT_ALGORITHM:-HS256}
      - JWT_ACCESS_TOKEN_EXPIRE_MINUTES=${JWT_ACCESS_TOKEN_EXPIRE_MINUTES:-30}
      - JWT_REFRESH_TOKEN_EXPIRE_DAYS=${JWT_REFRESH_TOKEN_EXPIRE_DAYS:-7}
      
      # Evolution API
      - EVOLUTION_API_URL=${EVOLUTION_API_URL:-http://localhost:8080}
      - EVOLUTION_API_KEY=${EVOLUTION_API_KEY:-your-evolution-api-key}
      - EVOLUTION_WEBHOOK_URL=${EVOLUTION_WEBHOOK_URL:-http://evolution-api:8000/webhook}
      
      # Rate Limiting
      - RATE_LIMIT_REQUESTS=${RATE_LIMIT_REQUESTS:-100}
      - RATE_LIMIT_WINDOW=${RATE_LIMIT_WINDOW:-60}
      
      # Monitoramento
      - ENABLE_METRICS=${ENABLE_METRICS:-true}
      - METRICS_PORT=${METRICS_PORT:-9090}
      
      # Logs
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - LOG_FORMAT=${LOG_FORMAT:-json}
    
    volumes:
      - ./logs:/app/logs
      - ./uploads:/app/uploads
      - ./temp:/app/temp
    
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    
    networks:
      - evolution-network
    
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # PostgreSQL - Banco de dados principal
  postgres:
    image: postgres:15-alpine
    container_name: evolution-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_USER=${POSTGRES_USER:-evolution}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-evolution123}
      - POSTGRES_DB=${POSTGRES_DB:-evolution_api}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
    
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    
    networks:
      - evolution-network
    
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-evolution} -d ${POSTGRES_DB:-evolution_api}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis - Cache e sessões
  redis:
    image: redis:7-alpine
    container_name: evolution-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis123}
    
    volumes:
      - redis_data:/data
    
    ports:
      - "${REDIS_PORT:-6379}:6379"
    
    networks:
      - evolution-network
    
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # Nginx - Proxy reverso e load balancer
  nginx:
    image: nginx:alpine
    container_name: evolution-nginx
    restart: unless-stopped
    ports:
      - "${NGINX_PORT:-80}:80"
      - "${NGINX_SSL_PORT:-443}:443"
    
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx
    
    depends_on:
      - evolution-api
    
    networks:
      - evolution-network
    
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus - Monitoramento de métricas
  prometheus:
    image: prom/prometheus:latest
    container_name: evolution-prometheus
    restart: unless-stopped
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    
    networks:
      - evolution-network
    
    profiles:
      - monitoring

  # Grafana - Dashboard de monitoramento
  grafana:
    image: grafana/grafana:latest
    container_name: evolution-grafana
    restart: unless-stopped
    ports:
      - "${GRAFANA_PORT:-3000}:3000"
    
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin123}
      - GF_USERS_ALLOW_SIGN_UP=false
    
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    
    depends_on:
      - prometheus
    
    networks:
      - evolution-network
    
    profiles:
      - monitoring

  # Jaeger - Tracing distribuído
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: evolution-jaeger
    restart: unless-stopped
    ports:
      - "${JAEGER_UI_PORT:-16686}:16686"
      - "${JAEGER_COLLECTOR_PORT:-14268}:14268"
    
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    
    networks:
      - evolution-network
    
    profiles:
      - monitoring

# Volumes persistentes
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

# Rede personalizada
networks:
  evolution-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16