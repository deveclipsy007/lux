"""\nConfiguração de Segurança para Evolution API\n\nCentraliza todas as configurações de segurança, incluindo:\n- Configurações de JWT\n- Configurações de rate limiting\n- Configurações de CORS\n- Configurações de SSL/TLS\n- Configurações de auditoria\n\nAutor: AgnoMaster - Evolution API Security Expert\nData: 2025-01-24\n"""\n\nimport os\nfrom typing import List, Optional\nfrom datetime import timedelta\nfrom pydantic import BaseModel, Field, validator\nfrom enum import Enum\n\ntry:\n    from pydantic_settings import BaseSettings\nexcept ImportError:\n    from pydantic import BaseSettings\n\n\nclass SecurityLevel(str, Enum):\n    \"\"\"Níveis de segurança do sistema\"\"\"\n    LOW = \"low\"\n    MEDIUM = \"medium\"\n    HIGH = \"high\"\n    CRITICAL = \"critical\"\n\n\nclass CORSConfig(BaseModel):\n    \"\"\"Configurações de CORS\"\"\"\n    allow_origins: List[str] = Field(default=[\"*\"], description=\"Origens permitidas\")\n    allow_methods: List[str] = Field(default=[\"GET\", \"POST\", \"PUT\", \"DELETE\", \"OPTIONS\"], description=\"Métodos HTTP permitidos\")\n    allow_headers: List[str] = Field(default=[\"*\"], description=\"Headers permitidos\")\n    allow_credentials: bool = Field(default=True, description=\"Permitir credenciais\")\n    expose_headers: List[str] = Field(default=[], description=\"Headers expostos\")\n    max_age: int = Field(default=600, description=\"Tempo de cache preflight em segundos\")\n\n\nclass RateLimitConfig(BaseModel):\n    \"\"\"Configurações de rate limiting\"\"\"\n    enabled: bool = Field(default=True, description=\"Habilitar rate limiting\")\n    default_limit: int = Field(default=100, description=\"Limite padrão por hora\")\n    burst_limit: int = Field(default=20, description=\"Limite de rajada por minuto\")\n    window_size: int = Field(default=3600, description=\"Janela de tempo em segundos\")\n    \n    # Limites específicos por endpoint\n    auth_limit: int = Field(default=10, description=\"Limite para endpoints de autenticação\")\n    api_key_limit: int = Field(default=1000, description=\"Limite padrão para API keys\")\n    webhook_limit: int = Field(default=500, description=\"Limite para webhooks\")\n    \n    # Configurações de bloqueio\n    block_duration: int = Field(default=3600, description=\"Duração do bloqueio em segundos\")\n    progressive_penalties: bool = Field(default=True, description=\"Penalidades progressivas\")\n\n\nclass JWTConfig(BaseModel):\n    \"\"\"Configurações de JWT\"\"\"\n    secret_key: str = Field(..., description=\"Chave secreta para assinatura\")\n    algorithm: str = Field(default=\"HS256\", description=\"Algoritmo de assinatura\")\n    access_token_expire_minutes: int = Field(default=60, description=\"Expiração do access token em minutos\")\n    refresh_token_expire_days: int = Field(default=7, description=\"Expiração do refresh token em dias\")\n    \n    # Configurações avançadas\n    issuer: str = Field(default=\"evolution-api\", description=\"Emissor do token\")\n    audience: str = Field(default=\"evolution-api-users\", description=\"Audiência do token\")\n    require_exp: bool = Field(default=True, description=\"Exigir campo exp\")\n    require_iat: bool = Field(default=True, description=\"Exigir campo iat\")\n    require_nbf: bool = Field(default=False, description=\"Exigir campo nbf\")\n    \n    # Configurações de segurança\n    blacklist_enabled: bool = Field(default=True, description=\"Habilitar blacklist de tokens\")\n    token_rotation: bool = Field(default=True, description=\"Rotação automática de tokens\")\n    max_token_age: int = Field(default=86400, description=\"Idade máxima do token em segundos\")\n    \n    @validator('secret_key')\n    def validate_secret_key(cls, v):\n        if len(v) < 32:\n            raise ValueError('Secret key deve ter pelo menos 32 caracteres')\n        return v\n\n\nclass APIKeyConfig(BaseModel):\n    \"\"\"Configurações de API Keys\"\"\"\n    enabled: bool = Field(default=True, description=\"Habilitar API keys\")\n    prefix: str = Field(default=\"agno_\", description=\"Prefixo das API keys\")\n    length: int = Field(default=32, description=\"Comprimento da chave\")\n    \n    # Configurações de expiração\n    default_expire_days: Optional[int] = Field(default=None, description=\"Expiração padrão em dias\")\n    max_expire_days: int = Field(default=365, description=\"Expiração máxima em dias\")\n    \n    # Configurações de rate limiting\n    default_rate_limit: int = Field(default=1000, description=\"Rate limit padrão por hora\")\n    max_rate_limit: int = Field(default=10000, description=\"Rate limit máximo por hora\")\n    \n    # Configurações de segurança\n    require_ip_whitelist: bool = Field(default=False, description=\"Exigir whitelist de IPs\")\n    log_usage: bool = Field(default=True, description=\"Registrar uso das API keys\")\n    auto_revoke_on_suspicious: bool = Field(default=True, description=\"Revogar automaticamente em atividade suspeita\")\n\n\nclass SecurityConfig(BaseModel):\n    \"\"\"Configurações gerais de segurança\"\"\"\n    level: SecurityLevel = Field(default=SecurityLevel.HIGH, description=\"Nível de segurança\")\n    \n    # Configurações de senha\n    password_min_length: int = Field(default=8, description=\"Comprimento mínimo da senha\")\n    password_require_uppercase: bool = Field(default=True, description=\"Exigir maiúsculas\")\n    password_require_lowercase: bool = Field(default=True, description=\"Exigir minúsculas\")\n    password_require_numbers: bool = Field(default=True, description=\"Exigir números\")\n    password_require_symbols: bool = Field(default=True, description=\"Exigir símbolos\")\n    \n    # Configurações de bloqueio de conta\n    max_failed_attempts: int = Field(default=5, description=\"Tentativas máximas de login\")\n    lockout_duration_minutes: int = Field(default=30, description=\"Duração do bloqueio em minutos\")\n    progressive_lockout: bool = Field(default=True, description=\"Bloqueio progressivo\")\n    \n    # Configurações de sessão\n    session_timeout_minutes: int = Field(default=60, description=\"Timeout da sessão em minutos\")\n    concurrent_sessions_limit: int = Field(default=5, description=\"Limite de sessões concorrentes\")\n    force_logout_on_password_change: bool = Field(default=True, description=\"Forçar logout ao trocar senha\")\n    \n    # Configurações de auditoria\n    audit_enabled: bool = Field(default=True, description=\"Habilitar auditoria\")\n    audit_retention_days: int = Field(default=90, description=\"Retenção de logs de auditoria\")\n    audit_sensitive_data: bool = Field(default=False, description=\"Auditar dados sensíveis\")\n    \n    # Configurações de criptografia\n    encryption_algorithm: str = Field(default=\"AES-256-GCM\", description=\"Algoritmo de criptografia\")\n    hash_algorithm: str = Field(default=\"SHA-256\", description=\"Algoritmo de hash\")\n    salt_rounds: int = Field(default=12, description=\"Rounds de salt para bcrypt\")\n\n\nclass SSLConfig(BaseModel):\n    \"\"\"Configurações de SSL/TLS\"\"\"\n    enabled: bool = Field(default=True, description=\"Habilitar SSL/TLS\")\n    cert_file: Optional[str] = Field(default=None, description=\"Arquivo do certificado\")\n    key_file: Optional[str] = Field(default=None, description=\"Arquivo da chave privada\")\n    ca_file: Optional[str] = Field(default=None, description=\"Arquivo da CA\")\n    \n    # Configurações de protocolo\n    min_version: str = Field(default=\"TLSv1.2\", description=\"Versão mínima do TLS\")\n    max_version: str = Field(default=\"TLSv1.3\", description=\"Versão máxima do TLS\")\n    ciphers: Optional[str] = Field(default=None, description=\"Cifras permitidas\")\n    \n    # Configurações de validação\n    verify_mode: str = Field(default=\"CERT_REQUIRED\", description=\"Modo de verificação\")\n    check_hostname: bool = Field(default=True, description=\"Verificar hostname\")\n    \n    # HSTS (HTTP Strict Transport Security)\n    hsts_enabled: bool = Field(default=True, description=\"Habilitar HSTS\")\n    hsts_max_age: int = Field(default=31536000, description=\"Max age do HSTS\")\n    hsts_include_subdomains: bool = Field(default=True, description=\"Incluir subdomínios no HSTS\")\n    hsts_preload: bool = Field(default=False, description=\"HSTS preload\")\n\n\nclass MonitoringConfig(BaseModel):\n    \"\"\"Configurações de monitoramento\"\"\"\n    enabled: bool = Field(default=True, description=\"Habilitar monitoramento\")\n    \n    # Métricas\n    collect_metrics: bool = Field(default=True, description=\"Coletar métricas\")\n    metrics_endpoint: str = Field(default=\"/metrics\", description=\"Endpoint de métricas\")\n    metrics_auth_required: bool = Field(default=True, description=\"Autenticação para métricas\")\n    \n    # Health checks\n    health_check_enabled: bool = Field(default=True, description=\"Habilitar health checks\")\n    health_check_endpoint: str = Field(default=\"/health\", description=\"Endpoint de health check\")\n    health_check_interval: int = Field(default=30, description=\"Intervalo de health check\")\n    \n    # Alertas\n    alerts_enabled: bool = Field(default=True, description=\"Habilitar alertas\")\n    alert_on_failed_auth: bool = Field(default=True, description=\"Alertar em falhas de autenticação\")\n    alert_on_rate_limit: bool = Field(default=True, description=\"Alertar em rate limit\")\n    alert_on_suspicious_activity: bool = Field(default=True, description=\"Alertar em atividade suspeita\")\n    \n    # Logging\n    log_level: str = Field(default=\"INFO\", description=\"Nível de log\")\n    log_format: str = Field(default=\"json\", description=\"Formato do log\")\n    log_file: Optional[str] = Field(default=None, description=\"Arquivo de log\")\n    log_rotation: bool = Field(default=True, description=\"Rotação de logs\")\n    log_max_size: str = Field(default=\"100MB\", description=\"Tamanho máximo do log\")\n    log_backup_count: int = Field(default=5, description=\"Número de backups de log\")\n\n\nclass EvolutionSecuritySettings(BaseSettings):\n    \"\"\"\n    Configurações principais de segurança da Evolution API\n    \"\"\"\n    \n    # Configurações básicas\n    environment: str = Field(default=\"development\", env=\"ENVIRONMENT\")\n    debug: bool = Field(default=False, env=\"DEBUG\")\n    \n    # Configurações de JWT\n    jwt_secret_key: str = Field(..., env=\"JWT_SECRET_KEY\")\n    jwt_algorithm: str = Field(default=\"HS256\", env=\"JWT_ALGORITHM\")\n    jwt_access_token_expire_minutes: int = Field(default=60, env=\"JWT_ACCESS_TOKEN_EXPIRE_MINUTES\")\n    jwt_refresh_token_expire_days: int = Field(default=7, env=\"JWT_REFRESH_TOKEN_EXPIRE_DAYS\")\n    \n    # Configurações de Redis\n    redis_url: Optional[str] = Field(default=None, env=\"REDIS_URL\")\n    redis_password: Optional[str] = Field(default=None, env=\"REDIS_PASSWORD\")\n    redis_db: int = Field(default=0, env=\"REDIS_DB\")\n    \n    # Configurações de banco de dados\n    database_url: Optional[str] = Field(default=None, env=\"DATABASE_URL\")\n    database_encrypt: bool = Field(default=True, env=\"DATABASE_ENCRYPT\")\n    \n    # Configurações de CORS\n    cors_origins: List[str] = Field(default=[\"*\"], env=\"CORS_ORIGINS\")\n    cors_allow_credentials: bool = Field(default=True, env=\"CORS_ALLOW_CREDENTIALS\")\n    \n    # Configurações de rate limiting\n    rate_limit_enabled: bool = Field(default=True, env=\"RATE_LIMIT_ENABLED\")\n    rate_limit_default: int = Field(default=100, env=\"RATE_LIMIT_DEFAULT\")\n    rate_limit_burst: int = Field(default=20, env=\"RATE_LIMIT_BURST\")\n    \n    # Configurações de SSL\n    ssl_enabled: bool = Field(default=False, env=\"SSL_ENABLED\")\n    ssl_cert_file: Optional[str] = Field(default=None, env=\"SSL_CERT_FILE\")\n    ssl_key_file: Optional[str] = Field(default=None, env=\"SSL_KEY_FILE\")\n    \n    # Configurações de monitoramento\n    monitoring_enabled: bool = Field(default=True, env=\"MONITORING_ENABLED\")\n    metrics_enabled: bool = Field(default=True, env=\"METRICS_ENABLED\")\n    \n    # Configurações de auditoria\n    audit_enabled: bool = Field(default=True, env=\"AUDIT_ENABLED\")\n    audit_retention_days: int = Field(default=90, env=\"AUDIT_RETENTION_DAYS\")\n    \n    # Configurações de segurança\n    security_level: SecurityLevel = Field(default=SecurityLevel.HIGH, env=\"SECURITY_LEVEL\")\n    max_failed_attempts: int = Field(default=5, env=\"MAX_FAILED_ATTEMPTS\")\n    lockout_duration_minutes: int = Field(default=30, env=\"LOCKOUT_DURATION_MINUTES\")\n    \n    # Configurações de API Key\n    api_key_enabled: bool = Field(default=True, env=\"API_KEY_ENABLED\")\n    api_key_default_rate_limit: int = Field(default=1000, env=\"API_KEY_DEFAULT_RATE_LIMIT\")\n    \n    class Config:\n        env_file = \".env\"\n        env_file_encoding = \"utf-8\"\n        case_sensitive = False\n    \n    def get_jwt_config(self) -> JWTConfig:\n        \"\"\"Retorna configuração de JWT\"\"\"\n        return JWTConfig(\n            secret_key=self.jwt_secret_key,\n            algorithm=self.jwt_algorithm,\n            access_token_expire_minutes=self.jwt_access_token_expire_minutes,\n            refresh_token_expire_days=self.jwt_refresh_token_expire_days\n        )\n    \n    def get_cors_config(self) -> CORSConfig:\n        \"\"\"Retorna configuração de CORS\"\"\"\n        return CORSConfig(\n            allow_origins=self.cors_origins,\n            allow_credentials=self.cors_allow_credentials\n        )\n    \n    def get_rate_limit_config(self) -> RateLimitConfig:\n        \"\"\"Retorna configuração de rate limiting\"\"\"\n        return RateLimitConfig(\n            enabled=self.rate_limit_enabled,\n            default_limit=self.rate_limit_default,\n            burst_limit=self.rate_limit_burst\n        )\n    \n    def get_security_config(self) -> SecurityConfig:\n        \"\"\"Retorna configuração de segurança\"\"\"\n        return SecurityConfig(\n            level=self.security_level,\n            max_failed_attempts=self.max_failed_attempts,\n            lockout_duration_minutes=self.lockout_duration_minutes,\n            audit_enabled=self.audit_enabled,\n            audit_retention_days=self.audit_retention_days\n        )\n    \n    def get_ssl_config(self) -> SSLConfig:\n        \"\"\"Retorna configuração de SSL\"\"\"\n        return SSLConfig(\n            enabled=self.ssl_enabled,\n            cert_file=self.ssl_cert_file,\n            key_file=self.ssl_key_file\n        )\n    \n    def get_monitoring_config(self) -> MonitoringConfig:\n        \"\"\"Retorna configuração de monitoramento\"\"\"\n        return MonitoringConfig(\n            enabled=self.monitoring_enabled,\n            collect_metrics=self.metrics_enabled\n        )\n    \n    def get_api_key_config(self) -> APIKeyConfig:\n        \"\"\"Retorna configuração de API Key\"\"\"\n        return APIKeyConfig(\n            enabled=self.api_key_enabled,\n            default_rate_limit=self.api_key_default_rate_limit\n        )\n    \n    @validator('jwt_secret_key')\n    def validate_jwt_secret_key(cls, v):\n        if len(v) < 32:\n            raise ValueError('JWT_SECRET_KEY deve ter pelo menos 32 caracteres')\n        return v\n    \n    @validator('cors_origins', pre=True)\n    def validate_cors_origins(cls, v):\n        if isinstance(v, str):\n            return [origin.strip() for origin in v.split(',')]\n        return v\n\n\n# Função para carregar configurações\ndef load_security_settings() -> EvolutionSecuritySettings:\n    \"\"\"Carrega as configurações de segurança\"\"\"\n    return EvolutionSecuritySettings()\n\n\n# Configurações padrão para diferentes ambientes\nDEFAULT_CONFIGS = {\n    \"development\": {\n        \"debug\": True,\n        \"security_level\": SecurityLevel.MEDIUM,\n        \"cors_origins\": [\"*\"],\n        \"rate_limit_enabled\": False,\n        \"ssl_enabled\": False,\n        \"audit_enabled\": False\n    },\n    \"testing\": {\n        \"debug\": True,\n        \"security_level\": SecurityLevel.LOW,\n        \"cors_origins\": [\"*\"],\n        \"rate_limit_enabled\": False,\n        \"ssl_enabled\": False,\n        \"audit_enabled\": False,\n        \"jwt_access_token_expire_minutes\": 5\n    },\n    \"staging\": {\n        \"debug\": False,\n        \"security_level\": SecurityLevel.HIGH,\n        \"rate_limit_enabled\": True,\n        \"ssl_enabled\": True,\n        \"audit_enabled\": True\n    },\n    \"production\": {\n        \"debug\": False,\n        \"security_level\": SecurityLevel.CRITICAL,\n        \"cors_origins\": [],  # Deve ser configurado explicitamente\n        \"rate_limit_enabled\": True,\n        \"ssl_enabled\": True,\n        \"audit_enabled\": True,\n        \"monitoring_enabled\": True,\n        \"metrics_enabled\": True\n    }\n}\n\n\ndef get_environment_config(environment: str) -> dict:\n    \"\"\"Retorna configuração padrão para um ambiente\"\"\"\n    return DEFAULT_CONFIGS.get(environment, DEFAULT_CONFIGS[\"production\"])\n"}},"query_language":"Portuguese"}}