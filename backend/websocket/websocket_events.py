"""\nSistema de Eventos WebSocket para Evolution API\n\nDefine:\n- Tipos de eventos\n- Estruturas de eventos\n- Serialização/Deserialização\n- Validação de eventos\n\nAutor: AgnoMaster - Evolution API WebSocket Expert\nData: 2025-01-24\n"""\n\nimport json\nfrom datetime import datetime, timezone\nfrom typing import Dict, Any, Optional, Union, List\nfrom dataclasses import dataclass, field\nfrom enum import Enum\nfrom pydantic import BaseModel, Field, validator\n\n\nclass EventType(str, Enum):\n    \"\"\"Tipos de eventos WebSocket\"\"\"\n    \n    # Eventos de Conexão\n    CONNECTION_ESTABLISHED = \"connection_established\"\n    CONNECTION_LOST = \"connection_lost\"\n    PING = \"ping\"\n    PONG = \"pong\"\n    \n    # Eventos de Autenticação\n    AUTHENTICATE = \"authenticate\"\n    AUTHENTICATION_SUCCESS = \"authentication_success\"\n    AUTHENTICATION_FAILED = \"authentication_failed\"\n    TOKEN_EXPIRED = \"token_expired\"\n    \n    # Eventos de Subscrição\n    SUBSCRIBE = \"subscribe\"\n    UNSUBSCRIBE = \"unsubscribe\"\n    SUBSCRIPTION_CONFIRMED = \"subscription_confirmed\"\n    SUBSCRIPTION_FAILED = \"subscription_failed\"\n    \n    # Eventos de WhatsApp/Evolution API\n    INSTANCE_STATUS_CHANGED = \"instance_status_changed\"\n    INSTANCE_CREATED = \"instance_created\"\n    INSTANCE_DELETED = \"instance_deleted\"\n    INSTANCE_CONNECTED = \"instance_connected\"\n    INSTANCE_DISCONNECTED = \"instance_disconnected\"\n    QR_CODE_GENERATED = \"qr_code_generated\"\n    \n    # Eventos de Mensagens\n    MESSAGE_RECEIVED = \"message_received\"\n    MESSAGE_SENT = \"message_sent\"\n    MESSAGE_DELIVERED = \"message_delivered\"\n    MESSAGE_READ = \"message_read\"\n    MESSAGE_FAILED = \"message_failed\"\n    \n    # Eventos de Agentes\n    AGENT_CREATED = \"agent_created\"\n    AGENT_UPDATED = \"agent_updated\"\n    AGENT_DELETED = \"agent_deleted\"\n    AGENT_MATERIALIZED = \"agent_materialized\"\n    AGENT_RESPONSE = \"agent_response\"\n    AGENT_ERROR = \"agent_error\"\n    \n    # Eventos do Sistema\n    SYSTEM_STATUS = \"system_status\"\n    SYSTEM_ERROR = \"system_error\"\n    SYSTEM_MAINTENANCE = \"system_maintenance\"\n    RATE_LIMIT_EXCEEDED = \"rate_limit_exceeded\"\n    \n    # Eventos de Usuário\n    USER_ACTIVITY = \"user_activity\"\n    USER_LOGGED_IN = \"user_logged_in\"\n    USER_LOGGED_OUT = \"user_logged_out\"\n    \n    # Eventos de Monitoramento\n    PERFORMANCE_METRICS = \"performance_metrics\"\n    HEALTH_CHECK = \"health_check\"\n    LOG_ENTRY = \"log_entry\"\n\n\nclass EventPriority(str, Enum):\n    \"\"\"Prioridade de eventos\"\"\"\n    LOW = \"low\"\n    NORMAL = \"normal\"\n    HIGH = \"high\"\n    CRITICAL = \"critical\"\n\n\nclass EventCategory(str, Enum):\n    \"\"\"Categoria de eventos\"\"\"\n    CONNECTION = \"connection\"\n    AUTHENTICATION = \"authentication\"\n    SUBSCRIPTION = \"subscription\"\n    WHATSAPP = \"whatsapp\"\n    AGENT = \"agent\"\n    SYSTEM = \"system\"\n    USER = \"user\"\n    MONITORING = \"monitoring\"\n\n\n# Mapeamento de tipos para categorias\nEVENT_CATEGORIES = {\n    # Connection\n    EventType.CONNECTION_ESTABLISHED: EventCategory.CONNECTION,\n    EventType.CONNECTION_LOST: EventCategory.CONNECTION,\n    EventType.PING: EventCategory.CONNECTION,\n    EventType.PONG: EventCategory.CONNECTION,\n    \n    # Authentication\n    EventType.AUTHENTICATE: EventCategory.AUTHENTICATION,\n    EventType.AUTHENTICATION_SUCCESS: EventCategory.AUTHENTICATION,\n    EventType.AUTHENTICATION_FAILED: EventCategory.AUTHENTICATION,\n    EventType.TOKEN_EXPIRED: EventCategory.AUTHENTICATION,\n    \n    # Subscription\n    EventType.SUBSCRIBE: EventCategory.SUBSCRIPTION,\n    EventType.UNSUBSCRIBE: EventCategory.SUBSCRIPTION,\n    EventType.SUBSCRIPTION_CONFIRMED: EventCategory.SUBSCRIPTION,\n    EventType.SUBSCRIPTION_FAILED: EventCategory.SUBSCRIPTION,\n    \n    # WhatsApp\n    EventType.INSTANCE_STATUS_CHANGED: EventCategory.WHATSAPP,\n    EventType.INSTANCE_CREATED: EventCategory.WHATSAPP,\n    EventType.INSTANCE_DELETED: EventCategory.WHATSAPP,\n    EventType.INSTANCE_CONNECTED: EventCategory.WHATSAPP,\n    EventType.INSTANCE_DISCONNECTED: EventCategory.WHATSAPP,\n    EventType.QR_CODE_GENERATED: EventCategory.WHATSAPP,\n    EventType.MESSAGE_RECEIVED: EventCategory.WHATSAPP,\n    EventType.MESSAGE_SENT: EventCategory.WHATSAPP,\n    EventType.MESSAGE_DELIVERED: EventCategory.WHATSAPP,\n    EventType.MESSAGE_READ: EventCategory.WHATSAPP,\n    EventType.MESSAGE_FAILED: EventCategory.WHATSAPP,\n    \n    # Agent\n    EventType.AGENT_CREATED: EventCategory.AGENT,\n    EventType.AGENT_UPDATED: EventCategory.AGENT,\n    EventType.AGENT_DELETED: EventCategory.AGENT,\n    EventType.AGENT_MATERIALIZED: EventCategory.AGENT,\n    EventType.AGENT_RESPONSE: EventCategory.AGENT,\n    EventType.AGENT_ERROR: EventCategory.AGENT,\n    \n    # System\n    EventType.SYSTEM_STATUS: EventCategory.SYSTEM,\n    EventType.SYSTEM_ERROR: EventCategory.SYSTEM,\n    EventType.SYSTEM_MAINTENANCE: EventCategory.SYSTEM,\n    EventType.RATE_LIMIT_EXCEEDED: EventCategory.SYSTEM,\n    \n    # User\n    EventType.USER_ACTIVITY: EventCategory.USER,\n    EventType.USER_LOGGED_IN: EventCategory.USER,\n    EventType.USER_LOGGED_OUT: EventCategory.USER,\n    \n    # Monitoring\n    EventType.PERFORMANCE_METRICS: EventCategory.MONITORING,\n    EventType.HEALTH_CHECK: EventCategory.MONITORING,\n    EventType.LOG_ENTRY: EventCategory.MONITORING,\n}\n\n\n@dataclass\nclass WebSocketEvent:\n    \"\"\"Evento WebSocket\"\"\"\n    type: EventType\n    data: Dict[str, Any] = field(default_factory=dict)\n    timestamp: datetime = field(default_factory=lambda: datetime.now(timezone.utc))\n    connection_id: Optional[str] = None\n    user_id: Optional[str] = None\n    priority: EventPriority = EventPriority.NORMAL\n    metadata: Dict[str, Any] = field(default_factory=dict)\n    \n    @property\n    def category(self) -> EventCategory:\n        return EVENT_CATEGORIES.get(self.type, EventCategory.SYSTEM)\n    \n    def to_dict(self) -> Dict[str, Any]:\n        \"\"\"Converte para dicionário\"\"\"\n        return {\n            \"type\": self.type.value,\n            \"data\": self.data,\n            \"timestamp\": self.timestamp.isoformat(),\n            \"connection_id\": self.connection_id,\n            \"user_id\": self.user_id,\n            \"priority\": self.priority.value,\n            \"category\": self.category.value,\n            \"metadata\": self.metadata\n        }\n    \n    def to_json(self) -> str:\n        \"\"\"Converte para JSON\"\"\"\n        return json.dumps(self.to_dict())\n    \n    @classmethod\n    def from_dict(cls, data: Dict[str, Any]) -> 'WebSocketEvent':\n        \"\"\"Cria evento a partir de dicionário\"\"\"\n        return cls(\n            type=EventType(data['type']),\n            data=data.get('data', {}),\n            timestamp=datetime.fromisoformat(data['timestamp'].replace('Z', '+00:00')),\n            connection_id=data.get('connection_id'),\n            user_id=data.get('user_id'),\n            priority=EventPriority(data.get('priority', EventPriority.NORMAL.value)),\n            metadata=data.get('metadata', {})\n        )\n    \n    @classmethod\n    def from_json(cls, json_str: str) -> 'WebSocketEvent':\n        \"\"\"Cria evento a partir de JSON\"\"\"\n        data = json.loads(json_str)\n        return cls.from_dict(data)\n\n\n# Schemas Pydantic para validação\nclass WebSocketEventSchema(BaseModel):\n    \"\"\"Schema para validação de eventos\"\"\"\n    type: EventType\n    data: Dict[str, Any] = Field(default_factory=dict)\n    timestamp: Optional[datetime] = None\n    connection_id: Optional[str] = None\n    user_id: Optional[str] = None\n    priority: EventPriority = EventPriority.NORMAL\n    metadata: Dict[str, Any] = Field(default_factory=dict)\n    \n    @validator('timestamp', pre=True, always=True)\n    def set_timestamp(cls, v):\n        return v or datetime.now(timezone.utc)\n    \n    def to_event(self) -> WebSocketEvent:\n        \"\"\"Converte para WebSocketEvent\"\"\"\n        return WebSocketEvent(**self.dict())\n\n\n# Eventos específicos com schemas\nclass AuthenticationEventData(BaseModel):\n    \"\"\"Dados de evento de autenticação\"\"\"\n    token: Optional[str] = None\n    user_id: Optional[str] = None\n    username: Optional[str] = None\n    error: Optional[str] = None\n    expires_at: Optional[datetime] = None\n\n\nclass SubscriptionEventData(BaseModel):\n    \"\"\"Dados de evento de subscrição\"\"\"\n    subscription_type: str\n    success: bool = True\n    error: Optional[str] = None\n\n\nclass InstanceEventData(BaseModel):\n    \"\"\"Dados de evento de instância\"\"\"\n    instance_id: str\n    instance_name: str\n    status: str\n    qr_code: Optional[str] = None\n    error: Optional[str] = None\n    metadata: Dict[str, Any] = Field(default_factory=dict)\n\n\nclass MessageEventData(BaseModel):\n    \"\"\"Dados de evento de mensagem\"\"\"\n    message_id: str\n    instance_id: str\n    from_number: str\n    to_number: Optional[str] = None\n    message_type: str\n    content: str\n    timestamp: datetime\n    status: Optional[str] = None\n    error: Optional[str] = None\n    metadata: Dict[str, Any] = Field(default_factory=dict)\n\n\nclass AgentEventData(BaseModel):\n    \"\"\"Dados de evento de agente\"\"\"\n    agent_id: str\n    agent_name: str\n    action: str\n    status: str\n    response: Optional[str] = None\n    error: Optional[str] = None\n    execution_time: Optional[float] = None\n    metadata: Dict[str, Any] = Field(default_factory=dict)\n\n\nclass SystemEventData(BaseModel):\n    \"\"\"Dados de evento do sistema\"\"\"\n    component: str\n    status: str\n    message: str\n    error: Optional[str] = None\n    metrics: Dict[str, Any] = Field(default_factory=dict)\n\n\nclass PerformanceEventData(BaseModel):\n    \"\"\"Dados de evento de performance\"\"\"\n    cpu_usage: float\n    memory_usage: float\n    active_connections: int\n    requests_per_second: float\n    response_time_avg: float\n    error_rate: float\n    timestamp: datetime\n\n\n# Factory functions para criar eventos específicos\ndef create_connection_event(connection_id: str, connected: bool = True) -> WebSocketEvent:\n    \"\"\"Cria evento de conexão\"\"\"\n    event_type = EventType.CONNECTION_ESTABLISHED if connected else EventType.CONNECTION_LOST\n    return WebSocketEvent(\n        type=event_type,\n        connection_id=connection_id,\n        data={\n            \"connection_id\": connection_id,\n            \"connected\": connected,\n            \"timestamp\": datetime.now(timezone.utc).isoformat()\n        }\n    )\n\n\ndef create_authentication_event(success: bool, user_id: Optional[str] = None, \n                               username: Optional[str] = None, error: Optional[str] = None) -> WebSocketEvent:\n    \"\"\"Cria evento de autenticação\"\"\"\n    event_type = EventType.AUTHENTICATION_SUCCESS if success else EventType.AUTHENTICATION_FAILED\n    data = AuthenticationEventData(\n        user_id=user_id,\n        username=username,\n        error=error\n    ).dict(exclude_none=True)\n    \n    return WebSocketEvent(\n        type=event_type,\n        user_id=user_id,\n        data=data,\n        priority=EventPriority.HIGH\n    )\n\n\ndef create_instance_event(event_type: EventType, instance_id: str, instance_name: str, \n                         status: str, qr_code: Optional[str] = None, \n                         error: Optional[str] = None) -> WebSocketEvent:\n    \"\"\"Cria evento de instância\"\"\"\n    data = InstanceEventData(\n        instance_id=instance_id,\n        instance_name=instance_name,\n        status=status,\n        qr_code=qr_code,\n        error=error\n    ).dict(exclude_none=True)\n    \n    priority = EventPriority.HIGH if error else EventPriority.NORMAL\n    \n    return WebSocketEvent(\n        type=event_type,\n        data=data,\n        priority=priority\n    )\n\n\ndef create_message_event(event_type: EventType, message_id: str, instance_id: str,\n                        from_number: str, content: str, message_type: str = \"text\",\n                        to_number: Optional[str] = None, status: Optional[str] = None,\n                        error: Optional[str] = None) -> WebSocketEvent:\n    \"\"\"Cria evento de mensagem\"\"\"\n    data = MessageEventData(\n        message_id=message_id,\n        instance_id=instance_id,\n        from_number=from_number,\n        to_number=to_number,\n        message_type=message_type,\n        content=content,\n        timestamp=datetime.now(timezone.utc),\n        status=status,\n        error=error\n    ).dict(exclude_none=True)\n    \n    priority = EventPriority.HIGH if error else EventPriority.NORMAL\n    \n    return WebSocketEvent(\n        type=event_type,\n        data=data,\n        priority=priority\n    )\n\n\ndef create_agent_event(event_type: EventType, agent_id: str, agent_name: str,\n                      action: str, status: str, response: Optional[str] = None,\n                      error: Optional[str] = None, execution_time: Optional[float] = None) -> WebSocketEvent:\n    \"\"\"Cria evento de agente\"\"\"\n    data = AgentEventData(\n        agent_id=agent_id,\n        agent_name=agent_name,\n        action=action,\n        status=status,\n        response=response,\n        error=error,\n        execution_time=execution_time\n    ).dict(exclude_none=True)\n    \n    priority = EventPriority.HIGH if error else EventPriority.NORMAL\n    \n    return WebSocketEvent(\n        type=event_type,\n        data=data,\n        priority=priority\n    )\n\n\ndef create_system_event(event_type: EventType, component: str, status: str,\n                       message: str, error: Optional[str] = None,\n                       metrics: Optional[Dict[str, Any]] = None) -> WebSocketEvent:\n    \"\"\"Cria evento do sistema\"\"\"\n    data = SystemEventData(\n        component=component,\n        status=status,\n        message=message,\n        error=error,\n        metrics=metrics or {}\n    ).dict(exclude_none=True)\n    \n    priority = EventPriority.CRITICAL if error else EventPriority.NORMAL\n    \n    return WebSocketEvent(\n        type=event_type,\n        data=data,\n        priority=priority\n    )\n\n\ndef create_performance_event(cpu_usage: float, memory_usage: float, \n                            active_connections: int, requests_per_second: float,\n                            response_time_avg: float, error_rate: float) -> WebSocketEvent:\n    \"\"\"Cria evento de performance\"\"\"\n    data = PerformanceEventData(\n        cpu_usage=cpu_usage,\n        memory_usage=memory_usage,\n        active_connections=active_connections,\n        requests_per_second=requests_per_second,\n        response_time_avg=response_time_avg,\n        error_rate=error_rate,\n        timestamp=datetime.now(timezone.utc)\n    ).dict()\n    \n    return WebSocketEvent(\n        type=EventType.PERFORMANCE_METRICS,\n        data=data,\n        priority=EventPriority.LOW\n    )\n\n\n# Utilitários\ndef filter_events_by_category(events: List[WebSocketEvent], category: EventCategory) -> List[WebSocketEvent]:\n    \"\"\"Filtra eventos por categoria\"\"\"\n    return [event for event in events if event.category == category]\n\n\ndef filter_events_by_priority(events: List[WebSocketEvent], min_priority: EventPriority) -> List[WebSocketEvent]:\n    \"\"\"Filtra eventos por prioridade mínima\"\"\"\n    priority_order = {\n        EventPriority.LOW: 0,\n        EventPriority.NORMAL: 1,\n        EventPriority.HIGH: 2,\n        EventPriority.CRITICAL: 3\n    }\n    \n    min_level = priority_order[min_priority]\n    return [event for event in events if priority_order[event.priority] >= min_level]\n\n\ndef sort_events_by_timestamp(events: List[WebSocketEvent], reverse: bool = False) -> List[WebSocketEvent]:\n    \"\"\"Ordena eventos por timestamp\"\"\"\n    return sorted(events, key=lambda e: e.timestamp, reverse=reverse)\n\n\ndef group_events_by_type(events: List[WebSocketEvent]) -> Dict[EventType, List[WebSocketEvent]]:\n    \"\"\"Agrupa eventos por tipo\"\"\"\n    groups = {}\n    for event in events:\n        if event.type not in groups:\n            groups[event.type] = []\n        groups[event.type].append(event)\n    return groups\n"},"query_language":"Portuguese"}}